vector<int> segTree;
    int n;
    NumArray(vector<int>& nums) {
        n = nums.size();
        segTree.resize(4*n, 0);
        buildSegTree(0, 0, n-1, nums);
    }
    void buildSegTree(int i, int l, int r, vector<int>& nums){
        if(l==r){
            segTree[i] = nums[l];
            return;
        }
        int mid = (l+r)/2;
        buildSegTree(2*i+1, l, mid, nums);
        buildSegTree(2*i+2, mid+1, r, nums);

        segTree[i] = segTree[2*i+1] + segTree[2*i+2];
    }
    void updateSegTree(int i, int l, int r, int idx, int val){
        if(l==r){
            segTree[i] = val;
            return;
        }
        int mid = (l+r)/2;
        if(idx <= mid) updateSegTree(2*i+1, l, mid, idx, val);
        else updateSegTree(2*i+2, mid+1, r, idx, val);

        segTree[i] = segTree[2*i+1] + segTree[2*i+2];
    }
    int querySum(int i, int l, int r, int s, int e){
        if(l > e || r < s) return 0;
        if(l >= s && r <= e){
            return segTree[i];
        }
        int mid = (l+r)/2;
        return querySum(2*i+1, l, mid, s, e) + querySum(2*i+2, mid+1, r, s, e);
    }
    void update(int index, int val) {
        updateSegTree(0, 0, n-1, index, val);
    }
    
    int sumRange(int left, int right) {
        return querySum(0, 0, n-1, left, right);
    }
